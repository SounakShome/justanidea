generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SALESMAN
  ADMIN
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

model Token {
  email      String   @unique
  code       String   @unique
  expiration DateTime
}

model Company {
  id             String   @id @default(cuid())
  Name           String   @unique
  Industry       String
  GSTIN          String   @unique
  CompanySize    String
  Address        String
  CompanyWebsite String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  users          User[]
}

model User {
  id                    String           @id @default(cuid())
  username              String
  email                 String           @unique
  password              String
  role                  Role             @default(SALESMAN)
  verified              Boolean          @default(false)
  onboarded             Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime
  companyId             String?
  company               Company?         @relation(fields: [companyId], references: [id])
  logs                  Inventory_logs[]
  createdPurchaseOrders PurchaseOrder[]
}

model Customer {
  customer_id  String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String   @unique
  address      String
  orderHistory Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  category_id String     @id @default(cuid())
  name        String
  description String
  products    Products[]
}

model Products {
  product_id  String     @id @default(cuid())
  name        String
  description String
  categoryId  String
  brand       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category   @relation(fields: [categoryId], references: [category_id])
  variants    Variants[]
}

model Variants {
  id            String           @id @default(cuid())
  productId     String
  product       Products         @relation(fields: [productId], references: [product_id])
  size          String
  color         String
  HSBN          Int
  price         Float
  stock         Int
  supplierId    String?
  supplier      Supplier?        @relation(fields: [supplierId], references: [id])
  orderItems    order_items[]
  logs          Inventory_logs[]
  purchaseItems PurchaseItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([productId, size, color])
}

model Order {
  order_id     String        @id @default(cuid())
  customerId   String
  order_date   DateTime      @default(now())
  total_amount Float
  status       String        @default("pending")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customer     Customer      @relation(fields: [customerId], references: [customer_id])
  items        order_items[]
}

model order_items {
  order_item_id String   @id @default(cuid())
  orderId       String
  variantId     String
  quantity      Int
  price         Float
  order         Order    @relation(fields: [orderId], references: [order_id])
  variant       Variants @relation(fields: [variantId], references: [id])

  @@unique([orderId, variantId])
  @@index([orderId])
  @@index([variantId])
}

model Supplier {
  id        String          @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime        @default(now())
  purchases PurchaseOrder[]
  variants  Variants[]
}

model PurchaseOrder {
  id          String         @id @default(cuid())
  supplierId  String
  createdById String
  date        DateTime       @default(now())
  status      PurchaseStatus @default(PENDING)
  totalAmount Float
  notes       String?
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  createdBy   User           @relation(fields: [createdById], references: [id])
  items       PurchaseItem[]
}

model PurchaseItem {
  id         String        @id @default(cuid())
  purchaseId String
  variantId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  purchase   PurchaseOrder @relation(fields: [purchaseId], references: [id])
  variant    Variants      @relation(fields: [variantId], references: [id])
}

model Inventory_logs {
  log_id      String   @id @default(cuid())
  variantId   String
  change      Int
  reason      String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  variant     Variants @relation(fields: [variantId], references: [id])
  creatredBy  User     @relation(fields: [createdById], references: [id])

  @@index([variantId])
}

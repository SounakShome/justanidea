generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SALESMAN
  ADMIN
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

model Token {
  email      String   @unique
  code       String   @unique
  expiration DateTime
}

model Company {
  id             String   @id @default(cuid())
  Name           String   @unique
  Industry       String
  GSTIN          String   @unique
  CompanySize    String
  Address        String
  CompanyWebsite String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  users          User[]
}

model User {
  id                    String           @id @default(cuid())
  username              String
  email                 String           @unique
  password              String
  role                  Role             @default(SALESMAN)
  verified              Boolean          @default(false)
  onboarded             Boolean          @default(false)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime
  companyId             String?
  company               Company?         @relation(fields: [companyId], references: [id])
  logs                  Inventory_logs[]
  createdPurchaseOrders PurchaseOrder[]
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  phone        String   @unique
  address      String
  GSTIN        String
  State_Name   String
  Code         Int
  orderHistory Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String
  products    Products[]
}

model Products {
  id          String     @id @default(cuid())
  name        String
  description String
  categoryId  String
  brand       String
  HSN         Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category    Category   @relation(fields: [categoryId], references: [id])
  variants    Variants[]

  @@index([name])
}

model Variants {
  id            String           @id @default(cuid())
  name          String
  size          String
  price         Float
  stock         Int
  productId     String
  supplierId    String?
  orderItems    order_items[]
  logs          Inventory_logs[]
  purchaseItems PurchaseItem[]
  product       Products         @relation(fields: [productId], references: [id])
  supplier      Supplier?        @relation(fields: [supplierId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([productId, size, name])
  @@index([name])
}

model Order {
  id           String        @id @default(cuid())
  customerId   String
  order_date   DateTime      @default(now())
  total_amount Float
  status       String        @default("pending")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customer     Customer      @relation(fields: [customerId], references: [id])
  items        order_items[]
}

model order_items {
  id        String   @id @default(cuid())
  orderId   String
  variantId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  variant   Variants @relation(fields: [variantId], references: [id])

  @@unique([orderId, variantId])
  @@index([orderId])
  @@index([variantId])
}

model Supplier {
  id         String          @id @default(cuid())
  name       String
  division   String
  phone      String
  address    String
  CIN        String
  GSTIN      String          @unique
  PAN        String          @unique
  Supp_State String
  Code       Int
  createdAt  DateTime        @default(now())
  purchases  PurchaseOrder[]
  variants   Variants[]
}

model PurchaseOrder {
  id          String         @id @default(cuid())
  invoiceNo   String         @unique
  Date        DateTime
  supplierId  String
  date        DateTime       @default(now())
  status      PurchaseStatus @default(PENDING)
  notes       String?
  items       PurchaseItem[]
  createdById String
  cartonNo    String
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PurchaseItem {
  id          String        @id @default(cuid())
  purchaseId  String        @unique
  variantId   String
  quantity    Int
  qtyReceived Int
  unitPrice   Float
  discount    Float
  totalPrice  Float
  purchase    PurchaseOrder @relation(fields: [purchaseId], references: [id])
  variant     Variants      @relation(fields: [variantId], references: [id])
}

model Inventory_logs {
  id          String   @id @default(cuid())
  variantId   String
  change      Int
  reason      String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  variant     Variants @relation(fields: [variantId], references: [id])
  creatredBy  User     @relation(fields: [createdById], references: [id])

  @@index([variantId])
}

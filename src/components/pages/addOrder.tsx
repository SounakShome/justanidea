"use client";

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import DatePicker from "@/components/ui/datePicker";
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Trash2, Check, ChevronsUpDown } from "lucide-react";
import { NewOrderLine } from "@/components/NewOrderLine";
import { cn } from "@/lib/utils";
import { AddOrderProps, Customer, FormValues, Product, OrderItem, Variant } from "@/types/addOrder"

const fetchCustomers = async (): Promise<Customer[]> => {
    try {
        const response = await fetch("/api/customers");
        if (!response.ok) {
            throw new Error(`Failed to fetch customers: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error("Error fetching customers:", error);
        // Return mock data for development
        return [
            { id: "1", name: "John Doe", phone: "123-456-7890", address: "123 Main St, City", GSTIN: "GST123", State_Name: "State", Code: 1 },
            { id: "2", name: "Jane Smith", phone: "098-765-4321", address: "456 Oak Ave, Town", GSTIN: "GST456", State_Name: "State", Code: 2 },
        ];
    }
};

export default function AddOrder({ products }: AddOrderProps) {
    const [customers, setCustomers] = useState<Customer[]>([]);
    const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
    const [isLoadingCustomers, setIsLoadingCustomers] = useState(false);
    const [customerComboOpen, setCustomerComboOpen] = useState(false);

    const { register, handleSubmit, setValue, getValues, reset, watch, formState: { errors } } = useForm<FormValues>({
        defaultValues: {
            invoiceNo: "", // This will be auto-generated by the API
            orderDate: new Date(), // Default to today's date
            customerId: "",
            status: "pending",
            notes: "",
            items: [],
            subTotal: 0,
            totalAmount: 0,
            billDiscountType: 'none',
            billDiscount: 0,
            remarks: "",
        },
    });

    const watchItems = watch("items") || [];
    const watchCustomerId = watch("customerId");
    const watchBillDiscountType = watch("billDiscountType") || 'none';
    const watchBillDiscount = watch("billDiscount") || 0;

    // Fetch customers on component mount
    useEffect(() => {
        const getCustomers = async () => {
            setIsLoadingCustomers(true);
            try {
                const data = await fetchCustomers();
                setCustomers(data);
            } catch (error) {
                console.error("Error fetching customers:", error);
                toast.error("Failed to load customers");
            } finally {
                setIsLoadingCustomers(false);
            }
        };

        getCustomers();
    }, []);

    // Update selected customer when customer ID changes
    useEffect(() => {
        if (watchCustomerId) {
            const customer = customers.find(c => c.id === watchCustomerId);
            setSelectedCustomer(customer || null);
        } else {
            setSelectedCustomer(null);
        }
    }, [watchCustomerId, customers]);

    // Calculate totals
    const calculateSubtotal = () => {
        return watchItems.reduce((total, item) => {
            return total + (item.total || 0);
        }, 0);
    };

    const calculateAfterBillDiscount = () => {
        const subtotal = calculateSubtotal();
        
        if (watchBillDiscountType === 'percentage') {
            return subtotal - (subtotal * watchBillDiscount / 100);
        } else if (watchBillDiscountType === 'amount') {
            return subtotal - watchBillDiscount;
        }
        
        return subtotal;
    };

    const calculateTotal = () => {
        return calculateAfterBillDiscount();
    };

    // Update item calculations
    const updateItemQuantity = (index: number, quantity: number) => {
        const currentItems = [...watchItems];
        const item = currentItems[index];
        if (item) {
            item.quantity = quantity;
            item.total = item.rate * quantity;
            setValue("items", currentItems);
        }
    };

    const updateItemRate = (index: number, rate: number) => {
        const currentItems = [...watchItems];
        const item = currentItems[index];
        if (item) {
            item.rate = rate;
            item.total = rate * item.quantity;
            setValue("items", currentItems);
        }
    };

    // Submit handler
    const onSubmit = async (data: FormValues) => {
        if (!data.customerId) {
            toast.error("Please select a customer");
            return;
        }
        
        if (!data.items || data.items.length === 0) {
            toast.error("Please add at least one item to your order");
            return;
        }
        
        try {
            // Calculate final totals
            const subTotal = calculateSubtotal();
            const totalAmount = calculateTotal();
            
            // Remove invoiceNo from data as it will be auto-generated by the API
            const { invoiceNo, ...orderDataWithoutInvoice } = data;
            
            const orderData = {
                ...orderDataWithoutInvoice,
                subTotal,
                totalAmount,
            };
            
            console.log("Order submitted:", orderData);
            
            // Here you would send data to your API
            const response = await fetch("/api/orders", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderData),
            });

            if (!response.ok) {
                toast.error(`Failed to create order: ${response.status}`);
                return;
            }

            const createdOrder = await response.json();
            
            toast.success("Order created successfully!", {
                description: `Invoice: ${createdOrder.id} | Total: â‚¹${totalAmount.toFixed(2)}`,
                duration: 5000,
            });

            // Reset form after successful submission
            reset({
                invoiceNo: "",
                orderDate: new Date(), // Reset to today's date
                customerId: "",
                status: "pending",
                notes: "",
                items: [],
                subTotal: 0,
                totalAmount: 0,
                billDiscountType: 'none',
                billDiscount: 0,
                remarks: "",
            });

            setSelectedCustomer(null);

            
        } catch (error) {
            console.error("Error creating order:", error);
            toast.error("Failed to create order");
        }
    };

    return (
        <div className="flex-1 space-y-4 p-4 sm:p-6">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    <Tabs defaultValue="order-details" className="w-full">
                        <TabsList className="grid w-full grid-cols-3 h-11">
                            <TabsTrigger value="order-details" className="text-xs sm:text-sm">Order Details</TabsTrigger>
                            <TabsTrigger value="items" className="text-xs sm:text-sm">Items</TabsTrigger>
                            <TabsTrigger value="summary" className="text-xs sm:text-sm">Summary</TabsTrigger>
                        </TabsList>

                        <TabsContent value="order-details" className="space-y-4">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                                {/* Order Information */}
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Order Information</CardTitle>
                                        <CardDescription>Basic order details</CardDescription>
                                    </CardHeader>
                                    <CardContent className="space-y-3">
                                        <div>
                                            <label className="block text-sm font-medium mb-1">Invoice Number</label>
                                            <Input
                                                value="Auto-generated"
                                                disabled
                                                className="h-10 bg-muted"
                                                placeholder="Will be generated automatically"
                                            />
                                            <p className="text-xs text-muted-foreground mt-1">
                                                Invoice number will be generated automatically (Format: INV-YYYYMMDD-XXXX)
                                            </p>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium mb-1">Order Date</label>
                                            <DatePicker
                                                setPurchase={(date: Date) => {
                                                    setValue("orderDate", date);
                                                }}
                                                defaultDate={new Date()}
                                            />
                                            <p className="text-xs text-muted-foreground mt-1">
                                                Defaults to today's date
                                            </p>
                                        </div>

                                        <div>
                                            <label className="block text-sm font-medium mb-1">Status</label>
                                            <Select
                                                value={watch("status")}
                                                onValueChange={(value) => setValue("status", value)}
                                            >
                                                <SelectTrigger className="h-10">
                                                    <SelectValue placeholder="Select status" />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="pending">Pending</SelectItem>
                                                    <SelectItem value="confirmed">Confirmed</SelectItem>
                                                    <SelectItem value="processing">Processing</SelectItem>
                                                    <SelectItem value="shipped">Shipped</SelectItem>
                                                    <SelectItem value="delivered">Delivered</SelectItem>
                                                    <SelectItem value="cancelled">Cancelled</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </div>
                                    </CardContent>
                                </Card>

                                {/* Customer Information */}
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Customer Information</CardTitle>
                                        <CardDescription>Select customer for this order</CardDescription>
                                    </CardHeader>
                                    <CardContent className="space-y-3">
                                        <div>
                                            <label className="block text-sm font-medium mb-1">Select Customer</label>
                                            <Popover open={customerComboOpen} onOpenChange={setCustomerComboOpen}>
                                                <PopoverTrigger asChild>
                                                    <Button
                                                        variant="outline"
                                                        role="combobox"
                                                        aria-expanded={customerComboOpen}
                                                        className="w-full justify-between h-10"
                                                        disabled={isLoadingCustomers}
                                                    >
                                                        {selectedCustomer
                                                            ? selectedCustomer.name
                                                            : "Select a customer..."}
                                                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                                                    </Button>
                                                </PopoverTrigger>
                                                <PopoverContent className="w-[--radix-popover-trigger-width] max-h-[--radix-popover-content-available-height] p-0">
                                                    <Command>
                                                        <CommandInput placeholder="Search customers..." />
                                                        <CommandList>
                                                            <CommandEmpty>No customer found.</CommandEmpty>
                                                            <CommandGroup>
                                                                {customers.map((customer) => (
                                                                    <CommandItem
                                                                        key={customer.id}
                                                                        value={customer.name}
                                                                        onSelect={() => {
                                                                            setSelectedCustomer(customer);
                                                                            setValue("customerId", customer.id);
                                                                            setCustomerComboOpen(false);
                                                                        }}
                                                                    >
                                                                        <Check
                                                                            className={cn(
                                                                                "mr-2 h-4 w-4",
                                                                                selectedCustomer?.id === customer.id
                                                                                    ? "opacity-100"
                                                                                    : "opacity-0"
                                                                            )}
                                                                        />
                                                                        <div className="flex flex-col">
                                                                            <span className="font-medium">{customer.name}</span>
                                                                            <span className="text-sm text-muted-foreground">
                                                                                {customer.phone || "No phone"} â€¢ {customer.GSTIN || "No GSTIN"}
                                                                            </span>
                                                                        </div>
                                                                    </CommandItem>
                                                                ))}
                                                            </CommandGroup>
                                                        </CommandList>
                                                    </Command>
                                                </PopoverContent>
                                            </Popover>
                                            <input
                                                type="hidden"
                                                {...register("customerId", { required: "Customer is required" })}
                                            />
                                            {errors.customerId && (
                                                <span className="text-red-500 text-xs">{errors.customerId.message}</span>
                                            )}
                                        </div>

                                        {selectedCustomer && (
                                            <div className="p-3 border rounded-md bg-muted/30">
                                                <h3 className="font-medium text-base mb-2">Customer Details</h3>
                                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                                                    <div>
                                                        <p className="text-sm text-muted-foreground">Name:</p>
                                                        <p className="text-sm">{selectedCustomer.name}</p>
                                                    </div>
                                                    <div>
                                                        <p className="text-sm text-muted-foreground">Phone:</p>
                                                        <p className="text-sm">{selectedCustomer.phone || "N/A"}</p>
                                                    </div>
                                                    <div>
                                                        <p className="text-sm text-muted-foreground">GSTIN:</p>
                                                        <p className="text-sm">{selectedCustomer.GSTIN || "N/A"}</p>
                                                    </div>
                                                    <div className="sm:col-span-2">
                                                        <p className="text-sm text-muted-foreground">Address:</p>
                                                        <p className="text-sm">{selectedCustomer.address || "N/A"}</p>
                                                    </div>
                                                </div>
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            </div>
                        </TabsContent>

                        <TabsContent value="items" className="space-y-4">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Order Items</CardTitle>
                                    <CardDescription>Add products to your order</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <NewOrderLine
                                        products={products}
                                        onProductSelect={(product: Product, variant: Variant, quantity: number) => {
                                            if (!product || !variant) {
                                                toast.error("Invalid product or variant selected");
                                                return;
                                            }

                                            // Check stock availability
                                            if (quantity > variant.stock) {
                                                toast.error(`Only ${variant.stock} units available in stock for ${product.name} - ${variant.name}`);
                                                return;
                                            }
                                            
                                            const currentItems = getValues("items") || [];
                                            
                                            const newItem: OrderItem = {
                                                id: variant.id,
                                                quantity: quantity,
                                                rate: variant.price,
                                                total: variant.price * quantity
                                            };
                                            
                                            setValue("items", [...currentItems, newItem]);
                                            toast.success(`Added ${product.name} - ${variant.name} to order`);
                                        }}
                                    />

                                    {watchItems && watchItems.length > 0 && (
                                        <div className="mt-4">
                                            <h3 className="font-medium mb-3">Added Items</h3>
                                            <div className="space-y-3">
                                                {watchItems.map((item, index) => {
                                                    const product = products.find(p => 
                                                        p.variants.some(v => v.id === item.id)
                                                    );
                                                    const variant = product?.variants.find(v => v.id === item.id);
                                                    
                                                    return product && variant ? (
                                                        <div key={`${item.id}-${index}`} className="border rounded-md p-3 space-y-3">
                                                            {/* Product Name - Full width on mobile */}
                                                            <div className="flex justify-between items-start">
                                                                <div className="flex-1">
                                                                    <p className="font-medium text-sm">{product.name}</p>
                                                                    <p className="text-xs text-muted-foreground">
                                                                        {variant.name} - {variant.size}
                                                                    </p>
                                                                </div>
                                                                <Button 
                                                                    type="button"
                                                                    variant="ghost" 
                                                                    size="sm"
                                                                    className="text-red-500 hover:text-red-700 h-8 w-8 p-0 ml-2"
                                                                    onClick={() => {
                                                                        const updatedItems = watchItems.filter((_, i) => i !== index);
                                                                        setValue("items", updatedItems);
                                                                    }}
                                                                >
                                                                    <Trash2 className="h-4 w-4" />
                                                                </Button>
                                                            </div>
                                                            
                                                            {/* Input fields - 3 columns for quantity, rate, and amount */}
                                                            <div className="grid grid-cols-3 gap-2">
                                                                <div>
                                                                    <label className="text-xs text-muted-foreground">Qty</label>
                                                                    <Input
                                                                        type="number"
                                                                        min="1"
                                                                        value={item.quantity}
                                                                        onChange={(e) => updateItemQuantity(index, parseInt(e.target.value) || 1)}
                                                                        className="h-9 text-sm"
                                                                    />
                                                                </div>
                                                                <div>
                                                                    <label className="text-xs text-muted-foreground">Rate</label>
                                                                    <Input
                                                                        type="number"
                                                                        min="0"
                                                                        step="0.01"
                                                                        value={item.rate}
                                                                        onChange={(e) => updateItemRate(index, parseFloat(e.target.value) || 0)}
                                                                        className="h-9 text-sm"
                                                                    />
                                                                </div>
                                                                <div>
                                                                    <label className="text-xs text-muted-foreground">Amount</label>
                                                                    <div className="h-9 flex items-center">
                                                                        <p className="font-medium text-sm">â‚¹{item.total.toFixed(2)}</p>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    ) : null;
                                                })}
                                            </div>
                                        </div>
                                    )}
                                </CardContent>
                            </Card>
                        </TabsContent>

                        <TabsContent value="summary" className="space-y-4">
                            <div className="space-y-4">
                                {/* Customer Information Summary */}
                                {selectedCustomer && (
                                    <Card>
                                        <CardHeader>
                                            <CardTitle>Customer Details</CardTitle>
                                            <CardDescription>Selected customer for this order</CardDescription>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="space-y-3">
                                                <div>
                                                    <p className="text-sm text-muted-foreground">Customer Name:</p>
                                                    <p className="font-medium">{selectedCustomer.name}</p>
                                                </div>
                                                <div>
                                                    <p className="text-sm text-muted-foreground">Address:</p>
                                                    <p className="text-sm">{selectedCustomer.address || "N/A"}</p>
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Card>
                                )}

                                {/* Order Items Summary */}
                                {watchItems && watchItems.length > 0 && (
                                    <Card>
                                        <CardHeader>
                                            <CardTitle>Order Items</CardTitle>
                                            <CardDescription>{watchItems.length} item(s) in this order</CardDescription>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="space-y-3">
                                                {watchItems.map((item, index) => {
                                                    const product = products.find(p => 
                                                        p.variants.some(v => v.id === item.id)
                                                    );
                                                    const variant = product?.variants.find(v => v.id === item.id);
                                                    
                                                    return product && variant ? (
                                                        <div key={`${item.id}-${index}`} className="flex justify-between items-center p-3 border rounded-md">
                                                            <div className="flex-1">
                                                                <p className="font-medium text-sm">{product.name}</p>
                                                                <p className="text-xs text-muted-foreground">
                                                                    {variant.name} - {variant.size} Ã— {item.quantity}
                                                                </p>
                                                                <p className="text-xs text-muted-foreground">
                                                                    Rate: â‚¹{item.rate.toFixed(2)}
                                                                </p>
                                                            </div>
                                                            <div className="text-right">
                                                                <p className="font-medium">â‚¹{item.total.toFixed(2)}</p>
                                                            </div>
                                                        </div>
                                                    ) : null;
                                                })}
                                            </div>
                                        </CardContent>
                                    </Card>
                                )}

                                <div className="grid grid-cols-1 gap-4">
                                    {/* Bill Discount Section */}
                                    <Card>
                                        <CardHeader>
                                            <CardTitle>Bill Discount (Optional)</CardTitle>
                                            <CardDescription>Apply discount on subtotal</CardDescription>
                                        </CardHeader>
                                        <CardContent className="space-y-3">
                                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                                                <div>
                                                    <label className="block text-sm font-medium mb-1">Discount Type</label>
                                                    <Select
                                                        value={watchBillDiscountType}
                                                        onValueChange={(value) => setValue("billDiscountType", value as 'percentage' | 'amount' | 'none')}
                                                    >
                                                        <SelectTrigger className="h-10">
                                                            <SelectValue placeholder="Select type" />
                                                        </SelectTrigger>
                                                        <SelectContent>
                                                            <SelectItem value="none">No Discount</SelectItem>
                                                            <SelectItem value="percentage">Percentage (%)</SelectItem>
                                                            <SelectItem value="amount">Amount (â‚¹)</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium mb-1">Discount Value</label>
                                                    <Input
                                                        type="number"
                                                        min="0"
                                                        step="0.01"
                                                        placeholder="0.00"
                                                        className="h-10"
                                                        disabled={watchBillDiscountType === 'none'}
                                                        {...register("billDiscount", { valueAsNumber: true })}
                                                    />
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Card>

                                    {/* Notes and Remarks Section */}
                                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                                        <Card>
                                            <CardHeader>
                                                <CardTitle>Notes</CardTitle>
                                                <CardDescription>Add any special instructions</CardDescription>
                                            </CardHeader>
                                            <CardContent className="space-y-3">
                                                <div>
                                                    <label className="block text-sm font-medium mb-1">Notes</label>
                                                    <textarea
                                                        className="w-full border rounded px-3 py-2 min-h-[80px] text-sm"
                                                        placeholder="Any special instructions or notes for this order..."
                                                        {...register("notes")}
                                                    />
                                                </div>
                                            </CardContent>
                                        </Card>

                                        <Card>
                                            <CardHeader>
                                                <CardTitle>Remarks (Optional)</CardTitle>
                                                <CardDescription>Additional remarks or comments</CardDescription>
                                            </CardHeader>
                                            <CardContent className="space-y-3">
                                                <div>
                                                    <label className="block text-sm font-medium mb-1">Remarks</label>
                                                    <textarea
                                                        className="w-full border rounded px-3 py-2 min-h-[80px] text-sm"
                                                        placeholder="Any additional remarks or comments..."
                                                        {...register("remarks")}
                                                    />
                                                </div>
                                            </CardContent>
                                        </Card>
                                    </div>

                                    {/* Order Total Summary */}
                                    <Card>
                                        <CardHeader>
                                            <CardTitle>Order Total</CardTitle>
                                            <CardDescription>Review your order totals</CardDescription>
                                        </CardHeader>
                                        <CardContent className="space-y-3">
                                            <div className="space-y-2">
                                                <div className="flex justify-between text-sm">
                                                    <span>Items Count:</span>
                                                    <span>{watchItems.length}</span>
                                                </div>
                                                <div className="flex justify-between text-sm">
                                                    <span>Subtotal:</span>
                                                    <span>â‚¹{calculateSubtotal().toFixed(2)}</span>
                                                </div>
                                                
                                                {watchBillDiscountType !== 'none' && watchBillDiscount > 0 && (
                                                    <>
                                                        <div className="flex justify-between text-sm text-green-600">
                                                            <span>Bill Discount ({watchBillDiscountType === 'percentage' ? `${watchBillDiscount}%` : `â‚¹${watchBillDiscount}`}):</span>
                                                            <span>-â‚¹{(calculateSubtotal() - calculateAfterBillDiscount()).toFixed(2)}</span>
                                                        </div>
                                                        <div className="flex justify-between text-sm font-medium">
                                                            <span>After Bill Discount:</span>
                                                            <span>â‚¹{calculateAfterBillDiscount().toFixed(2)}</span>
                                                        </div>
                                                    </>
                                                )}
                                                
                                                <Separator />
                                                
                                                <div className="flex justify-between font-bold text-base">
                                                    <span>Total Amount:</span>
                                                    <span>â‚¹{calculateTotal().toFixed(2)}</span>
                                                </div>
                                            </div>

                                            <Button 
                                                type="submit" 
                                                className="w-full h-11" 
                                                disabled={!watchCustomerId || watchItems.length === 0}
                                            >
                                                Create Order
                                            </Button>
                                        </CardContent>
                                    </Card>
                                </div>
                            </div>
                        </TabsContent>
                    </Tabs>
                </form>
        </div>
    );
}
